package SiphonShadow

import Warlock
import GlobalDefines
import TriggerHelper
import SkillHelper
import BossHelper
import TimerUtils
import AbilityObjEditing
import SoundHelper

public class SiphonShadow extends WarlockSkill
    static let self_id = 'wl0r'
    //static timer tm_decrase_dmg
    //static bool b_decrase = false

    static let dmg = 150.
    static let inc = 18.
    static let energy_dec = 15.
    static let channel_time = 4
    static let hp_cost = 500
    static let cool_down = 60.
    static let mana_cost = 0
    static let channel_effect_interval = 1.
    static let base_bolt_num = 4
    static let dmg_type = ATTACK_TYPE_MAGIC
    static function desc(int bolt_num) returns string
        return Color_Define.COLOR_NORMAL + "→集中意识萃取Boss身上溢出的暗影箭能量。|n" + 
        "吟唱{0}秒，提取出{1}支暗影箭矢，射向Boss造成{2}伤害。|n".format(channel_time.toString(), bolt_num.toString(), dmg.toString(1)) +
        Color_Define.COLOR_ENERGY_DECREASE + "↓每支箭矢命中后减少目标{0}点能量|n".format(energy_dec.toString(0)) +
        Color_Define.COLOR_WARLOCK + "↑ {0}%法术强度额外伤害（每支）|n".format((inc*100).toString(0)) +
        Color_Define.COLOR_WARNING + "▼技能被打断也会进入CD|n▲技能释放成功时扣除自身{0}生命|n".format(hp_cost.toString()) +
        Color_Define.COLOR_COOL_DOWN + "→CD:{0}s".format(cool_down.toString(1))

    private trigger prepare_trigger_ = CreateTrigger()
    private trigger endcast_trigger_ = CreateTrigger()
    private trigger finish_trigger_ = CreateTrigger()
    private timer display_timer_
    private int channel_time_
    private int bolt_num_
    construct(unit u)
        super(u)

    override function listen()
        trigger_..registerUnitEvent(owner_, EVENT_UNIT_SPELL_EFFECT)
            ..addCondition(Filter(()->GetSpellAbilityId()==SiphonShadow.self_id))
            ..addAction(function SiphonShadow.cast)
            ..setData(this castTo int)
        prepare_trigger_..registerUnitEvent(owner_, EVENT_UNIT_SPELL_CHANNEL)
            ..addCondition(Filter(()->GetSpellAbilityId()==SiphonShadow.self_id))
            ..addAction(function SiphonShadow.prepare)
            ..setData(this castTo int)
        endcast_trigger_..registerUnitEvent(owner_, EVENT_UNIT_SPELL_ENDCAST)
            ..addCondition(Filter(()->GetSpellAbilityId()==SiphonShadow.self_id))
            ..addAction(function SiphonShadow.endcast)
            ..setData(this castTo int)
        finish_trigger_..registerUnitEvent(owner_, EVENT_UNIT_SPELL_FINISH)
            ..addCondition(Filter(()->GetSpellAbilityId()==SiphonShadow.self_id))
            ..addAction(function SiphonShadow.finish)
            ..setData(this castTo int)

    static function prepare()
        let self = GetTriggeringTrigger().getData() castTo SiphonShadow
        if BossHelper.cur_boss == null or not BossHelper.cur_boss.isAlive()
            self.owner_.issueImmediateOrder("stop")

    static function cast()
        var self = GetTriggeringTrigger().getData() castTo SiphonShadow
        if self.display_timer_ != null
            self.display_timer_.release()
        self.display_timer_ = getTimer()
        self.channel_time_ = 0
        self.display_timer_..setData(self castTo int)
            ..startPeriodic(SiphonShadow.channel_effect_interval, function channel_effect)

    static function channel_effect()
        var self = GetExpiredTimer().getData() castTo SiphonShadow
        if BossHelper.cur_boss == null or not BossHelper.cur_boss.isAlive()
            if self.display_timer_ != null
                self.display_timer_.release()
                self.display_timer_ = null
            self.owner_.issueImmediateOrder("stop")
            return

        SoundPlayer.scroll(self.owner_.getPos3Real())
        flashEffect("scrollpurp.mdx", self.owner_.getPos())
        
        self.channel_time_++
        let speed = 64 * 0.071 / 128
        let angle = 90.
        createTTEx(self.owner_.getPos3with(120) - vec3(145, 0, 0), self.channel_time_.toString(), 7, color(255,204,0).withAlpha(255))
            ..setPermanent(false)
            ..setFadepoint(2.)
            ..setLifespan(3.)
            ..setVelocity(speed * CosBJ(angle), speed * SinBJ(angle))

        if self.channel_time_ == 4
            if self.display_timer_ != null
                self.display_timer_.release()
                self.display_timer_ = null

    static function finish()
        if BossHelper.cur_boss == null or not BossHelper.cur_boss.isAlive()
            return
        let self = GetTriggeringTrigger().getData() castTo SiphonShadow
        if self.channel_time_ == 4
            self.release_bolts()
            self.owner_.setHP(self.owner_.getHP() - hp_cost)

    function release_bolts()
        bolt_num_ = GetUnitAbilityLevel(owner_, self_id) + base_bolt_num
        owner_.setAbilityLevel(self_id, 1)

        getTimer()..setData(this castTo int)
            ..startPeriodic(0.1, function release_one)

    static function release_one()
        var self = GetExpiredTimer().getData() castTo SiphonShadow
        angle ang
        if GetRandomInt(1, 2) == 1
            ang = GetRandomReal(-90., -30.).asAngleDegrees()
        else
            ang = GetRandomReal(30., 90.).asAngleDegrees()

        ShadowBolt.launch.playOnPoint(self.owner_.getPos3Real())
        new AutoTrace(ShadowBolt.effect_id, BossHelper.cur_boss, self.owner_,
            ang + self.owner_.getFacing().asAngleDegrees(), new SiphonShadowFunctions(self.owner_, BossHelper.cur_boss))
        
        self.bolt_num_--
        if self.bolt_num_ <= 0
            GetExpiredTimer().release()

    static function endcast()
        var self = GetTriggeringTrigger().getData() castTo SiphonShadow
        if self.display_timer_ != null
            self.display_timer_.release()
            self.display_timer_ = null

    static class SiphonShadowFunctions implements AutoTraceFunctions
        unit caster_
        unit target_
        construct(unit caster, unit target)
            this.caster_ = caster
            this.target_ = target
        override function on_hit()
            flashEffect("wlq.mdx", target_.getPos3Real())
            ShadowBolt.hit.playOnPoint(target_.getPos3Real())

            let final_dmg = GetHeroAgi(caster_, true) * SiphonShadow.inc + SiphonShadow.dmg
            caster_.damageTarget(target_, final_dmg, dmg_type)
            StatisticsHelper.add_real(caster_.getOwner(), final_dmg)
            target_.setMana(target_.getMana() - energy_dec)
            destroy this

@compiletime
function create_siphone_shadow()
    let ed = new AbilityDefinitionMoonPriestessStarfall(SiphonShadow.self_id)
    ed.setLevels(15)
    for i = 1 to 15
        ed..setManaCost(i, SiphonShadow.mana_cost)
            ..setCooldown(i, SiphonShadow.cool_down)
            ..setBuffs(i, "")
            ..setDurationHero(i, SiphonShadow.channel_time.toReal())
            ..setDurationNormal(i, SiphonShadow.channel_time.toReal())
            ..setTooltipNormal(i,
                Color_Define.COLOR_WARLOCK + "Siphon Shadow" +
                Color_Define.COLOR_HOT_KEY + "(R)")
            ..setTooltipNormalExtended(i, SiphonShadow.desc(i + SiphonShadow.base_bolt_num))
            ..setEffects(i, "")
            ..setAreaofEffect(i, 0)
    
    ed..setButtonPositionNormalX(3)
        ..setButtonPositionNormalY(2)
        ..setHotkeyNormal("R")
        ..setName("SiphonShadow")
        ..setHeroAbility(false)
        ..setRequiredLevel(1)
        ..setIconNormal("replaceabletextures\\commandbuttons\\wlr.blp")

package IceLance
import IceMage
import TimerUtils
import MathHelper
import TriggerHelper
import HashMap
import GlobalDefines
import EditorHelper
import StatisticsHelper

public class IceLance extends IceMageSkill
    static let self_id = 'im0e'
    static let help_id = 'im1e'
    static let unit_id = 'im0u'
    static let self_name = "IceLance"
    static let offset = 95.
    static let create_block_num = 7
    static let dmg_radius = 170.
    static let last_time = 10.
    static let dmg = 300.
    static let inc = 24.
    static let range1 = 900.
    static let range2 = 1100.
    static let cool_down = 8.
    static let mana_cost = 27
    static let dmg_type = ATTACK_TYPE_MAGIC
    static let desc = Color_Define.COLOR_NORMAL + "→依次选择两个点，从第一个点向第二个点释放IceLance，对命中单位造成{0}伤害。|n".format(dmg.toString(1)) +
        Color_Define.COLOR_LAST_TIME + "→冰块持续{0}秒。|n".format(last_time.toString(1)) +
        Color_Define.COLOR_ICEMAGE + "↑ {0}%法术强度额外伤害|n".format((inc*100).toString(0)) +
        Color_Define. COLOR_CAST_RANGE + "→施法距离：{0}, {1}|n".format(range1.toString(1), range2.toString(1)) +
        Color_Define.COLOR_COOL_DOWN + "→CD:{0}s".format(cool_down.toString(1))
    
    private boolean is_from_unit_
    private vec2 pt1
    private vec2 pt2
    private timer timer_
    private trigger help_skill_trigger_ = null
    construct(unit u)
        super(u)
        help_skill_trigger_ = CreateTrigger()
        reset()

    ondestroy
        help_skill_trigger_..disable()..destr()

    override function listen()
        trigger_..registerUnitEvent(owner_, EVENT_UNIT_SPELL_EFFECT)
            ..addCondition(Filter(()->GetSpellAbilityId()==IceLance.self_id))
            ..addAction(function IceLance.cast)
            ..setData(this castTo int)
        help_skill_trigger_..registerUnitEvent(owner_, EVENT_UNIT_SPELL_EFFECT)
            ..addCondition(Filter(()->GetSpellAbilityId()==IceLance.help_id))
            ..setData(this castTo int)
            ..addAction(function IceLance.choose_point2)
        
    static function cast()
        (GetTriggeringTrigger().getData() castTo IceLance).choose_point1()

    private function choose_point1()
        let lc = GetSpellTargetLoc()
        pt1 = vec2(GetLocationX(lc), GetLocationY(lc))
        RemoveLocation(lc)
        GetOwningPlayer(owner_).setAbilityAvailable(IceLance.self_id, false)
        owner_.addAbility(IceLance.help_id)
        if timer_ != null
            timer_.release()
            timer_ = null
        timer_ = getTimer()..setData(this castTo int)
            ..start(1, function IceLance.on_choose_point_timer_expired)

    static private function choose_point2()
        let lc = GetSpellTargetLoc()
        var self = GetTriggeringTrigger().getData() castTo IceLance
        self.is_from_unit_ = false
        self.pt2 = vec2(GetLocationX(lc), GetLocationY(lc))
        RemoveLocation(lc)

    static private function on_choose_point_timer_expired()
        let self = GetExpiredTimer().getData() castTo IceLance
        self.do_cast()

    private function do_cast()
        owner_.removeAbility(IceLance.help_id)

        vec2 from_vec2
        vec2 to_vec2
        if is_from_unit_
            from_vec2 = owner_.getPos()
            to_vec2 = pt1
        else
            from_vec2 = pt1
            to_vec2 = pt2

        vec2 cur = from_vec2
        if is_from_unit_
            cur = MathHelper.forward(cur, from_vec2.angleTo(to_vec2), IceLance.offset)

        let alreay_deal_dmg_map = new HashMap<unit, boolean>
        for i = 0 to IceLance.create_block_num - 1
            createUnit(GetOwningPlayer(owner_), IceLance.unit_id, cur, bj_UNIT_FACING.fromRad())
                ..setTimedLife(IceLance.last_time)
                ..setPathing(false)
                ..setPos(cur)
            let g = CreateGroup()
            g.enumUnitsInRange(cur, IceLance.dmg_radius)
            for target in g
                if not alreay_deal_dmg_map.has(target) and not IsUnitAlly(target, GetOwningPlayer(owner_)) and target.isAlive()
                    let final_dmg = GetHeroAgi(owner_, true) * IceLance.inc + IceLance.dmg
                    owner_.damageTarget(target, final_dmg, IceLance.dmg_type)
                    StatisticsHelper.add_real(owner_.getOwner(), final_dmg)
                    alreay_deal_dmg_map.put(target, true)
            g.destr()
            flashEffect("Abilities\\Spells\\Undead\\FrostNova\\FrostNovaTarget.mdl", cur)
            cur = MathHelper.forward(cur, from_vec2.angleTo(to_vec2), IceLance.offset)

        reset()
        destroy alreay_deal_dmg_map
        GetOwningPlayer(owner_).setAbilityAvailable(IceLance.self_id, true)
        if timer_ != null
            timer_.release()
            timer_ = null

    private function reset()
        is_from_unit_ = true
        pt1 = vec2(0, 0)
        pt2 = vec2(0, 0)


@compiletime
function create_ice_lance()
    let editor = EditorHelper.create_channel_template(IceLance.self_id, emSkillKey.E)
    editor..setCastRange(1, IceLance.range1)
        ..setManaCost(1, IceLance.mana_cost)
        ..setCooldown(1, IceLance.cool_down)
        ..setButtonPositionNormalX(2)
        ..setButtonPositionNormalY(2)
        ..setHotkeyNormal("E")
        ..setTargetType(1, emTargetType.Ground castTo int)
        ..setName(IceLance.self_name)
        ..setTooltipNormal(1, Color_Define.COLOR_ICEMAGE + "Ice Lance" + Color_Define.COLOR_HOT_KEY + "(E)")
        ..setTooltipNormalExtended(1, IceLance.desc)
        ..setIconNormal("replaceabletextures\\commandbuttons\\ime.blp")
        ..setArtEffect("Abilities\\Spells\\NightElf\\Blink\\BlinkCaster.mdl")

    destroy editor

@compiletime
function create_ice_lance_help()
    let editor = EditorHelper.create_channel_template(IceLance.help_id, emSkillKey.E)
    editor..setCastRange(1, IceLance.range2)
        ..setManaCost(1, 0)
        ..setCooldown(1, 0)
        ..setButtonPositionNormalX(2)
        ..setButtonPositionNormalY(2)
        ..setHotkeyNormal("E")
        ..setTargetType(1, emTargetType.Ground castTo int)
        ..setName(IceLance.self_name)
        ..setTooltipNormal(1, Color_Define.COLOR_ICEMAGE + "Ice Lance (Direction)" + Color_Define.COLOR_HOT_KEY + "(E)")
        ..setTooltipNormalExtended(1, IceLance.desc)
        ..setIconNormal("replaceabletextures\\commandbuttons\\ime2.blp")
        ..setArtEffect("Abilities\\Spells\\NightElf\\Blink\\BlinkCaster.mdl")

    destroy editor

@compiletime
function create_ice_lance_ice_block()
    let editor = new UnitDefinition(IceLance.unit_id, 'hwat')
    editor..setName("Ice Block")
        ..setUpgradesUsed("")
        ..setCollisionSize(24.)
        ..setUnitSoundSet("")
        ..setScalingValue(.45)
        ..setModelFile("Doodads\\Icecrown\\Rocks\\Icecrown_Crystal\\Icecrown_Crystal7.mdl")
        ..setSelectionScale(1.)
        ..setDeathTimeseconds(0.1)
        ..setSpeedBase(0)
        ..setDefenseBase(0)
        ..setArmorType(ArmorType.Hero)
        ..setAcquisitionRange(0.)
        ..setAttacksEnabled(0)
        ..setLevel(1)
        ..setHitPointsMaximumBase(2000)
        ..setHitPointsRegenerationRate(0.)
        ..setSightRadiusDay(0)
        ..setSightRadiusNight(0)
        ..setHideMinimapDisplay(true)
        ..setFoodCost(0)
        ..setTargetedAs("ward")

    destroy editor
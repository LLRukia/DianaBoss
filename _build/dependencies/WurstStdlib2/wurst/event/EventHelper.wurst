package EventHelper
import NoWurst
import HashMap
import _Handles

constant rectMap = new HashMap<trigger, rect>()
constant regionMap = new HashMap<region, int>()
constant triggerData = new Table()

public function trigger.registerUnitInRangeSource(unit whichUnit, real range, boolexpr filter) returns event
	triggerData..saveUnit(this.getHandleId(), whichUnit)..saveTrigger(whichUnit.getHandleId(), this)
	return TriggerRegisterUnitInRange(this, whichUnit, range, filter)

public function trigger.registerUnitInRangeSource(unit whichUnit, real range) returns event
	return this.registerUnitInRangeSource(whichUnit, range, null)

public function trigger.getSource() returns unit
	return triggerData.loadUnit(GetHandleId(this))

public function unit.clearRegister()
	let handleId = this.getHandleId()
	if triggerData.loadTrigger(handleId) == null
		return
	let t = triggerData.loadTrigger(handleId)
	let trigHandleId = t.getHandleId()
	t.destr()
	triggerData..removeHandle(handleId)..removeHandle(trigHandleId)

public function getSpellTargetPos() returns vec2
	return vec2(GetSpellTargetX(), GetSpellTargetY())

public function getOrderPos() returns vec2
	return vec2(GetOrderPointX(), GetOrderPointY())

public function getOrderTargetPos() returns vec2
	return GetOrderTarget().getPos()

public function trigger.registerRectEnterEventSource(rect r)
	TriggerRegisterEnterRectSimple(this, r)
	rectMap.put(this, r)

public function trigger.registerRectLeaveEventSource(rect r)
	TriggerRegisterLeaveRectSimple(this, r)
	rectMap.put(this, r)

public function trigger.getSourceRect() returns rect
	return rectMap.get(this)

public function trigger.unregisterRectEvent()
	rectMap.remove(this)

public function region.setRegionData(int data)
	regionMap.put(this, data)

public function region.loadRegionData() returns int
	return regionMap.get(this)

public function region.removeRegionData()
	regionMap.remove(this)

public function eventid.isPlayerunitEvent() returns boolean
	let eventId = this.getHandleId()
	return (eventId >= 18 and eventId <= 51) or (eventId >= 269 and eventId <= 277)

public function eventid.isKeyboardEvent() returns boolean
	let eventId = this.getHandleId()
	return (eventId >= 261 and eventId <= 268) or (eventId == 17)
	

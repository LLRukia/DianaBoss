package GamecacheBuffer
import GamecacheKeys
import Execute
import NetworkConfig
import ErrorHandling
import SafetyChecks

interface SynchronizerFunction
	function sync(string key)

public enum BufferType
	INTEGER
	REAL
	BOOLEAN

/**
	This class is used as a buffer for sending data in each round.
	Each instance is restricted to only writing one type, to save
	us from keeping a crapton of counter variables at least here.
**/
public class GamecacheBuffer
	private gamecache gc
	private string parentKey
	private int writeIndex = -1
	private int readIndex  = -1
	private BufferType bufferType
	private var syncCounter = 0

	construct(gamecache gc, string parentKey, BufferType bufferType)
		this.gc = gc
		this.parentKey = parentKey
		this.bufferType = bufferType

	// returns the amount of writes available for this buffer
	function getRemainingWrite() returns int
		return GamecacheKeys.count - writeIndex - 1

	// returns the amount of reads available for this buffer
	function getRemainingRead() returns int
		return GamecacheKeys.count - readIndex - 1

	function getSize() returns int
		return writeIndex + 1

	// these functions will inline with uncheckedDispatch on
	private function checkType(BufferType toCheck)
		if SAFETY_CHECKS_ENABLED and bufferType != toCheck
			error("GamecacheBuffer: invalid buffer usage - mismatched type")

	private function advanceWriteIndex()
		if SAFETY_CHECKS_ENABLED and writeIndex + 1 >= GamecacheKeys.count
			error("GamecacheBuffer: trying to write out of available keys bounds")
		writeIndex++

	private function advanceReadIndex()
		if SAFETY_CHECKS_ENABLED and readIndex + 1 >= GamecacheKeys.count
			error("GamecacheBuffer: trying to read out of available keys bounds")
		readIndex++

	function writeInt(int value)
		advanceWriteIndex()
		checkType(BufferType.INTEGER)
		gc.saveInt(parentKey, GamecacheKeys.get(writeIndex), value)

	function writeReal(real value)
		advanceWriteIndex()
		checkType(BufferType.REAL)
		gc.saveReal(parentKey, GamecacheKeys.get(writeIndex), value)

	function writeBoolean(bool value)
		advanceWriteIndex()
		checkType(BufferType.BOOLEAN)
		gc.saveBoolean(parentKey, GamecacheKeys.get(writeIndex), value)

	function readInt() returns int
		advanceReadIndex()
		checkType(BufferType.INTEGER)
		if not gc.hasInt(parentKey, GamecacheKeys.get(readIndex))
			error("GamecacheBuffer: trying to read non-present int #" + readIndex.toString())
		return gc.loadInt(parentKey, GamecacheKeys.get(readIndex))

	function readReal() returns real
		advanceReadIndex()
		checkType(BufferType.REAL)
		if not gc.hasReal(parentKey, GamecacheKeys.get(readIndex))
			error("GamecacheBuffer: trying to read non-present real #" + readIndex.toString())
		return gc.loadReal(parentKey, GamecacheKeys.get(readIndex))

	function readBoolean() returns bool
		advanceReadIndex()
		checkType(BufferType.BOOLEAN)
		if not gc.hasBoolean(parentKey, GamecacheKeys.get(readIndex))
			error("GamecacheBuffer: trying to read non-present bool #" + readIndex.toString())

		return gc.loadBoolean(parentKey, GamecacheKeys.get(readIndex))

	function getSynchronizerFunction() returns SynchronizerFunction
		SynchronizerFunction synchronizer

		switch bufferType
			case BufferType.INTEGER
				synchronizer = key -> begin
					gc.syncInt(parentKey, key)
				end
			case BufferType.REAL
				synchronizer = key -> begin
					gc.syncReal(parentKey, key)
				end
			case BufferType.BOOLEAN
				synchronizer = key -> begin
					gc.syncBoolean(parentKey, key)
				end

		return synchronizer

	function sync()
		let synchronizer = getSynchronizerFunction()
		syncCounter = 0

		executeWhile(DATA_PER_EXECUTE, () -> syncCounter <= writeIndex) () ->
			synchronizer.sync(GamecacheKeys.get(syncCounter))
			syncCounter++

		destroy synchronizer

	function reset()
		writeIndex = 0
		readIndex = 0

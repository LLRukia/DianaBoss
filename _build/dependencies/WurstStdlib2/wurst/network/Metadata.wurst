package Metadata
import GamecacheKeys

public tuple metadata(int ints, int reals, int booleans, int asciiInts, int syncs)

public constant EMPTY_META = metadata(0, 0, 0, 0, 0)

/**
	Simple wrapper class for Network-related metadata about the transmission.
	Necessary to let other clients know about the amount of data being sent.
**/
public class MetadataStore
	private static constant META_CACHE = InitGameCache("m.w3v")

	// keys used for metadata about the transmission
	private static constant META_INTEGER_KEY	 = GamecacheKeys.get(0)
	private static constant META_REAL_KEY		= GamecacheKeys.get(1)
	private static constant META_BOOLEAN_KEY	 = GamecacheKeys.get(2)
	private static constant META_STRING_KEY	  = GamecacheKeys.get(3)
	private static constant META_SYNC_ROUNDS_KEY = GamecacheKeys.get(4)
	// total amount of metadata keys
	private static constant META_COUNT = 5

	private var mkey = GamecacheKeys.get(this castTo int)

	construct()
		META_CACHE.flushMission(mkey)

	private function saveValue(string key, int value)
		META_CACHE.saveInt(mkey, key, value)

	private function loadValue(string key) returns int
		return META_CACHE.loadInt(mkey, key)

	function setCounts(metadata data)
		saveValue(META_INTEGER_KEY,	 data.ints)
		saveValue(META_REAL_KEY,		data.reals)
		saveValue(META_BOOLEAN_KEY,	 data.booleans)
		saveValue(META_STRING_KEY,	  data.asciiInts)
		saveValue(META_SYNC_ROUNDS_KEY, data.syncs)

	function getCounts() returns metadata
		return metadata(
			loadValue(META_INTEGER_KEY),
			loadValue(META_REAL_KEY),
			loadValue(META_BOOLEAN_KEY),
			loadValue(META_STRING_KEY),
			loadValue(META_SYNC_ROUNDS_KEY))

	function sync()
		for i = 0 to META_COUNT - 1
			META_CACHE.syncInt(mkey, GamecacheKeys.get(i))

package MultifileIO
import PreloadIO
import ErrorHandling
import Buffer
import IOTaskExecutor

class FilePacket
	string packet

	construct(string packet)
		this.packet = packet

function getChunkPath(string path, int id) returns string
	return path + "/chunk" + id.toString() + ".txt"

function getBasePath() returns string
	return ""

/**
	Represents the status of a file operation.
	NOT_ENABLED corresponds to Local Files not being enabled for the player.
**/
public enum FileLoadStatus
	SUCCESS
	NOT_ENABLED

public interface FileLoadCallback
	function run(FileLoadStatus status)

public interface FileSaveCallback
	function run()

/**
	Common functionality for file classes.
**/
abstract class AbstractFile
	// this string will be the only packet in the last file, determining the end of a multifile
	protected constant TERMINATOR = "lastfile"
	protected var buffer = new HashBuffer()
	protected var multiMode = true
	protected var path = ""
	protected IOTaskExecutor executor = null
	protected var working = false

	construct(string path, boolean multiMode, real delay)
		initialize(path, multiMode, delay)

	construct(string path, boolean multiMode)
		initialize(path, multiMode, 0)

	construct(string path, real delay)
		initialize(path, true, delay)

	construct(string path)
		initialize(path, true, 0)

	private function initialize(string path, boolean multiMode, real delay)
		if delay > 0
			executor = new TimedIOTaskExecutor(delay)
		else
			executor = new InstantIOTaskExecutor()

		this.path = path
		this.multiMode = multiMode

	ondestroy
		destroy buffer
		destroy executor

/**
	This is a file IO class supporting a special 'multifile' mode
	to circumvent the natural limitation of WC3's Preload API,
	allowing us to write as much data as we need to be later read
	with FileReader.

	Keep in mind, that single-file mode only supports PACKETS_PER_FILE
	max lines.

	Writing is line-based, meaning we write line-by-line, and reading
	also works line-by-line.

	Usage:
		1. Create a new instance of the class, using the constructor you need
			let writer = new FileWriter("path/to/folder")

		2. Queue some data for writing
			writer.writeLine("abc")
			writer.writeLine("cba")

		3. Save the file, specifying a callback to be called when all data has been saved
			writer.save(() -> doStuffAfterSave())

		4. Destroy the instance

		Note: The class can be used again after saving once.
**/
public class FileWriter extends AbstractFile
	/**
		If multiMode is true, then path should be the path to a folder where the data will be stored.
		Otherwise, the path should be a file path.

		Delay is the number of seconds to wait between each file write operation. You should use
		this if you expect to write a lot of data to prevent players from lagging out.
	**/
	construct(string path, boolean multiMode, real delay)
		super(path, multiMode, delay)

	construct(string path, boolean multiMode)
		super(path, multiMode)

	construct(string path, real delay)
		super(path, delay)

	construct(string path)
		super(path)

	/**
		Queue a single line to be written to the file when .save() is called.
	**/
	function writeLine(string value)
		if not multiMode and buffer.getStringCount() == PACKETS_PER_FILE
			error("FileWriter: exceeded max packet count")
		buffer.writeString(value)

	private function saveTerminator(int chunkId)
		executor.submit() ->
			IOWriter.prepareWrite()
			IOWriter.writePacket(TERMINATOR)
			IOWriter.flushFile(getChunkPath(path, chunkId))


	private function saveSingle(int chunkId)
		executor.submit() ->
			IOWriter.prepareWrite()
			// write out as much data as we can into this file
			while buffer.hasString() and IOWriter.canWrite()
				IOWriter.writePacket(buffer.readString())

			if multiMode
				IOWriter.flushFile(getChunkPath(path, chunkId))
			else
				IOWriter.flushFile(path)


	/**
		Starts saving the queue data to disk, and specifies a callback when all data has been saved.
	**/
	function save(FileSaveCallback callback)
		if working
			error("FileWriter: trying to save the file, but it is already saving")

		// this is necessary because WC3 does not, by default, create folders recursively
		IOWriter.createFolder(path)

		if multiMode
			// count the amount of chunks we need to save
			let fileCount = (buffer.getStringCount() div PACKETS_PER_FILE) + 1
			for i = 0 to fileCount
				saveSingle(i)
			// last file is a terminator file telling us we should stop
			saveTerminator(fileCount)
		else
			saveSingle(0)

		if callback != null
			executor.onComplete() ->
				working = false
				callback.run()

		working = true
		executor.start()

/**
	This is a file IO class supporting a special 'multifile' mode that allows
	reading back multifiles written by FileWriter.

	Reading is line-based.

	Usage:
		1. Create a new instance of the class
			let reader = new FileReader("path/to/folder")

		2. Load the data, and specify a callback when the file has loaded, and read the data
			reader.load() ->
				while reader.canRead()
					doSomethingWithData(reader.readLine())


		3. Destroy the instance
			destroy reader
**/
public class FileReader extends AbstractFile
	/**
		If multiMode is true, then path should be the path to a folder where the data will be read from.
		Otherwise, the path should be a file path.

		Delay is the number of seconds to wait between each file read operation. You should use
		this if you expect to read a lot of data to prevent players from lagging out.
	**/
	construct(string path, boolean multiMode, real delay)
		super(path, multiMode, delay)

	construct(string path, boolean multiMode)
		super(path, multiMode)

	construct(string path, real delay)
		super(path, delay)

	construct(string path)
		super(path)

	private function readChunk(int chunkId)
		executor.submit() ->
			// select proper file depending on multimode
			if multiMode
				IOReader.load(getChunkPath(path, chunkId))
			else
				IOReader.load(path)

			// if this file is the terminating file, we need to stop
			// we also need to stop if there is no data available (no file at all or it's empty)
			if IOReader.getPacket(0) != TERMINATOR and IOReader.canRead()
				while IOReader.canRead()
					buffer.writeString(IOReader.readPacket())

				// start reading the next file if we're in multimode
				if multiMode
					readChunk(chunkId + 1)


	/**
		Starts loading the file and specifies a callback to be called when all data has loaded
	**/
	function load(FileLoadCallback callback)
		if working
			error("FileReader: trying to load the file, but it is already loading")

		executor.onComplete() ->
			working = false
			callback.run(FileLoadStatus.SUCCESS)

		// initiate reading, since readChunk will load other chunks as necessary
		readChunk(0)
		working = true
		executor.start()

	/** Returns true if there's data to be read still */
	function canRead() returns boolean
		return buffer.hasString()

	/** Reads one line as written by FileWriter.writeLine() */
	function readLine() returns string
		return buffer.readString()

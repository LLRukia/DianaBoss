package GroupTests

@Test
function testGroupBasic()
	let g = CreateGroup()
	assertTrue(g != null)
	assertTrue(g.isEmpty())

	let u = createUnit(Player(0), 'hfoo', vec2(0, 0), 0 .fromDeg())
	assertTrue(u != null)
	g.add(u)

	assertTrue(g.size() == 1)
	for i = 1 to 10
		g.add(createUnit(Player(0), 'hfoo', vec2(0, 0), 0 .fromDeg()))

	assertTrue(g.size() == 11)

	g.clear()
	assertTrue(g.isEmpty())

@Test
function testGroupForLoops()
	let g = CreateGroup()
	assertTrue(g != null)
	assertTrue(not g.hasNext())
	for i = 0 to 10
		g.add(createUnit(Player(0), 'hfoo', vec2(0, 0), 0 .fromDeg()))

	assertTrue(g.hasNext())

	for u in g
		assertTrue(u != null)

	for _ from g

	assertTrue(not g.hasNext())


@Test
function testRandom()
	let g = CreateGroup()

	for i = 0 to 10
		g.add(createUnit(Player(0), 'hfoo', vec2(0, 0), 0 .fromDeg()))

	let ru = g.getRandomUnit()

	assertTrue(ru != null)

	assertTrue(g.contains(ru))

	g.remove(ru)

	for i = 1 to 10
		g.remove(g.getRandomUnit())

	assertTrue(g.isEmpty())

@Test
function testHandleId()
	let g = CreateGroup()
	assertTrue(g.getHandleId() != 0)

	for i = 0 to 100
		let g2 = CreateGroup()
		assertTrue(g2.getHandleId() != 0)
		assertTrue(g2.getHandleId() != g.getHandleId())

@Test
function testVararg()
	let g = CreateGroup()
	g.add(createUnit(Player(0), 'hfoo', vec2(0, 0), 0 .fromDeg()), createUnit(Player(0), 'hfoo', vec2(0, 0), 0 .fromDeg()), createUnit(Player(0), 'hfoo', vec2(0, 0), 0 .fromDeg()))
	g.size().assertEquals(3)

package ChannelAbilityPreset
import NoWurst
import public AbilityObjEditing
import public ObjectIds
import public ObjectIdGenerator
import OrderStringFactory
import BitSet

var odf = new OrderStringFactory()
@compiletime function initOdf()
	odf = new OrderStringFactory()


public enum Option
	VISIBLE
	TARGETIMAGE
	PHYSICALSPELL
	UNIVERSALSPELL
	UNIQUECAST

public enum TT
	NONE
	UNIT
	POINT
	POINTUNIT
	PASSIVE

public function TT.toString() returns string
	switch this
		case NONE
			return "Instant Cast"
		case TT.POINT
			return "Point Target"
		case TT.UNIT
			return "Unit Target"
		case TT.POINTUNIT
			return "Point & Unit Target"
		case PASSIVE
			return "Passive"

public class ChannelAbilityPreset extends AbilityDefinitionIllidanChannel
	private bitset optionSet = bitset(0)
	private string orderString

	function getOrderString() returns string
		return orderString

	construct(int newId, int lvls, boolean removeChannelProperties, TooltipGenerator tgen)
		super(newId)
		registerTooltipGenerator(tgen)
		setup(lvls, removeChannelProperties)

	construct(int newId, int lvls, boolean removeChannelProperties)
		super(newId)
		setup(lvls, removeChannelProperties)

	function setup(int lvls, boolean removeChannelProperties)
		this.lvls = lvls
		tooltipStartListen()
		setLevels(lvls)
		tooltipStopListen(false)
		orderString = odf.getOrderString(true)
		presetBaseOrderID(_lvl -> orderString)
		if removeChannelProperties
			removeChannelProperties(true)

	function makeUnitSpell(int mana, real cooldown)
		setHeroAbility(false)
		presetManaCost(lvl -> mana)
		presetCooldown(lvl -> cooldown)

	function removeChannelProperties(boolean removeVisuals)
		removeChannelProperties(removeVisuals, true)

	function removeChannelProperties(boolean removeVisuals, boolean makeVisible)
		presetDisableOtherAbilities(lvl -> false)
		presetFollowThroughTime(lvl -> 0.)
		presetArtDuration(lvl -> 0.)
		if makeVisible
			presetOption(Option.VISIBLE, true)
		if removeVisuals
			setArtCaster("")
			setArtEffect("")
			setArtSpecial("")
			setArtTarget("")

	function presetTargetTypes(TT ttype)
		presetTargetType(lvl -> ttype castTo int)

	function presetOption(Option opt, boolean flag)
		let pow = opt castTo int
		if optionSet.contains(pow)
			if not flag
				optionSet = optionSet.remove(pow)
		else if flag
			optionSet = optionSet.add(pow)

		presetOptions(lvl -> optionSet.val)

	function hasOption(Option option) returns boolean
		return optionSet.contains(option castTo int)
